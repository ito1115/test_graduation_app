<div class="container">
  <div class="header">
    <h1>My Books</h1>
    <div class="user-info">
      <p>Welcome, <%= current_user.email %>!</p>
      <%= link_to "Profile", edit_user_registration_path, class: "btn btn-secondary" %>
      <%= link_to "Sign out", destroy_user_session_path, data: { turbo_method: :delete }, class: "btn btn-outline-secondary" %>
    </div>
  </div>

  <div class="actions">
    <%= link_to "本を検索", search_books_path, class: "btn btn-primary" %>
    <%= link_to "手動で本を追加", new_book_path, class: "btn btn-secondary" %>
  </div>

  <!-- My Books検索フォーム -->
  <div class="my-books-search">
    <div class="search-box">
      <input type="text" id="myBooksSearchInput" placeholder="My Booksを検索（タイトル・著者名）" class="search-input">
      <button type="button" id="clearSearch" class="clear-button" style="display: none;">×</button>
    </div>
    <div class="search-results-info" id="searchResultsInfo" style="display: none;">
      <span id="searchResultsCount">0</span>件の結果が見つかりました
    </div>
  </div>

<!-- Bootstrap Tabs for Reading Status -->
<ul class="nav nav-tabs" id="readingStatusTabs" role="tablist">
  <li class="nav-item" role="presentation">
    <button class="nav-link active" id="all-tab" data-status="all" type="button" role="tab">
      すべて (<%= @books.count %>)
    </button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="wish-tab" data-status="wish" type="button" role="tab">
      読みたい (<%= @books.wish.count %>)
    </button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="tsundoku-tab" data-status="tsundoku" type="button" role="tab">
      積読 (<%= @books.tsundoku.count %>)
    </button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="completed-tab" data-status="completed" type="button" role="tab">
      読了 (<%= @books.completed.count %>)
    </button>
  </li>
</ul>

<!-- Books List (Single List with Filtering) -->
<div class="tab-content" id="readingStatusTabContent">
  <div class="tab-pane fade show active" id="books-container" role="tabpanel">
    <%= render 'books_list', books: @books %>
  </div>

<script>
// My Books検索機能
document.addEventListener('DOMContentLoaded', function() {
  const searchInput = document.getElementById('myBooksSearchInput');
  const clearButton = document.getElementById('clearSearch');
  const searchResultsInfo = document.getElementById('searchResultsInfo');
  const searchResultsCount = document.getElementById('searchResultsCount');
  const bookCards = document.querySelectorAll('.book-card');
  const tabButtons = document.querySelectorAll('#readingStatusTabs [data-status]');
  
  if (searchInput) {
    // 検索実行関数
    function performSearch() {
      const query = searchInput.value.trim().toLowerCase();
      let visibleCount = 0;
      let currentActiveStatus = 'all';
      
      // 現在アクティブなタブを取得
      const activeTab = document.querySelector('#readingStatusTabs .nav-link.active');
      if (activeTab) {
        currentActiveStatus = activeTab.getAttribute('data-status');
      }
      
      // クリアボタンの表示/非表示
      clearButton.style.display = query.length > 0 ? 'block' : 'none';
      
      // 各書籍カードをチェック
      bookCards.forEach(card => {
        const title = card.querySelector('h3 a')?.textContent?.toLowerCase() || '';
        
        // 著者名を取得(Author:を含むpタグを探す)
        let author = '';
        const authorElements = card.querySelectorAll('p');
        authorElements.forEach(p => {
          if (p.textContent.includes('Author:')) {
            author = p.textContent.toLowerCase();
          }
        });
        
        const cardStatus = card.getAttribute('data-status');
        
        // ステータスフィルターをチェック
        const statusMatch = currentActiveStatus === 'all' || cardStatus === currentActiveStatus;
        
        // 検索クエリーをチェック
        const searchMatch = query.length === 0 || 
                           title.includes(query) || 
                           author.includes(query);
        
        // 両方の条件を満たすかチェック
        if (statusMatch && searchMatch) {
          card.style.display = 'block';
          visibleCount++;
        } else {
          card.style.display = 'none';
        }
      });
      
      // 検索結果情報の表示
      if (query.length > 0) {
        searchResultsCount.textContent = visibleCount;
        searchResultsInfo.style.display = 'block';
      } else {
        searchResultsInfo.style.display = 'none';
      }
    }
    
    // リアルタイム検索
    searchInput.addEventListener('input', performSearch);
    
    // クリアボタン
    clearButton.addEventListener('click', function() {
      searchInput.value = '';
      performSearch();
    });
    
    // タブ切り替え時も検索を再実行
    tabButtons.forEach(button => {
      button.addEventListener('click', function() {
        setTimeout(performSearch, 100);
      });
    });
  }
});

// Tab filtering functionality
document.addEventListener('DOMContentLoaded', function() {
  const tabButtons = document.querySelectorAll('#readingStatusTabs [data-status]');
  const bookCards = document.querySelectorAll('.book-card[data-status]');
  
  tabButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      
      // Remove active class from all buttons
      tabButtons.forEach(btn => btn.classList.remove('active'));
      
      // Add active class to clicked button
      this.classList.add('active');
      
      // Get selected status
      const selectedStatus = this.getAttribute('data-status');
      
      // Filter book cards
      bookCards.forEach(card => {
        const cardStatus = card.getAttribute('data-status');
        
        if (selectedStatus === 'all' || cardStatus === selectedStatus) {
          card.style.display = 'block';
        } else {
          card.style.display = 'none';
        }
      });
    });
  });
});

// ISBN検索のテスト用JavaScript
function testISBNSearch() {
  const isbn = prompt("Enter ISBN to search:");
  if (!isbn) return;
  
  fetch(`/books/search_by_isbn?isbn=${isbn}`)
    .then(response => response.json())
    .then(data => {
      console.log('Search results:', data);
      alert('Check browser console for results');
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Search failed');
    });
}
</script>

<button onclick="testISBNSearch()">Test ISBN Search (Console)</button>
</div>