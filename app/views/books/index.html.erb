<div class="container">
  <div class="header">
    <h1>My Books</h1>
    <div class="user-info">
      <p>Welcome, <%= current_user.email %>!</p>
      <%= link_to "Profile", edit_user_registration_path, class: "btn btn-secondary" %>
      <%= link_to "Sign out", destroy_user_session_path, data: { turbo_method: :delete }, class: "btn btn-outline-secondary" %>
    </div>
  </div>

  <div class="actions">
    <%= link_to "本を検索", search_books_path, class: "btn btn-primary" %>
    <%= link_to "手動で本を追加", new_book_path, class: "btn btn-secondary" %>
  </div>

  <!-- My Books検索フォーム -->
  <div class="my-books-search">
    <div class="search-box">
      <input type="text" id="myBooksSearchInput" placeholder="My Booksを検索（タイトル・著者名）" class="search-input">
      <button type="button" id="clearSearch" class="clear-button" style="display: none;">×</button>
    </div>
    <div class="search-results-info" id="searchResultsInfo" style="display: none;">
      <span id="searchResultsCount">0</span>件の結果が見つかりました
    </div>
  </div>

<!-- Bootstrap Tabs for Reading Status -->
<ul class="nav nav-tabs" id="readingStatusTabs" role="tablist">
  <li class="nav-item" role="presentation">
    <button class="nav-link active" id="all-tab" data-status="all" type="button" role="tab">
      すべて (<%= @books.count %>)
    </button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="wish-tab" data-status="wish" type="button" role="tab">
      読みたい (<%= @books.wish.count %>)
    </button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="tsundoku-tab" data-status="tsundoku" type="button" role="tab">
      積読 (<%= @books.tsundoku.count %>)
    </button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="completed-tab" data-status="completed" type="button" role="tab">
      読了 (<%= @books.completed.count %>)
    </button>
  </li>
</ul>

<!-- Books List (Single List with Filtering) -->
<div class="tab-content" id="readingStatusTabContent">
  <div class="tab-pane fade show active" id="books-container" role="tabpanel">
    <%= render 'books_list', books: @books %>
  </div>

<script>
// My Books検索機能
document.addEventListener('DOMContentLoaded', function() {
  const searchInput = document.getElementById('myBooksSearchInput');
  const clearButton = document.getElementById('clearSearch');
  const searchResultsInfo = document.getElementById('searchResultsInfo');
  const searchResultsCount = document.getElementById('searchResultsCount');
  const bookCards = document.querySelectorAll('.book-card');
  const tabButtons = document.querySelectorAll('#readingStatusTabs [data-status]');
  
  if (searchInput) {
    // 検索実行関数
    function performSearch() {
      const query = searchInput.value.trim().toLowerCase();
      let visibleCount = 0;
      let currentActiveStatus = 'all';
      
      // 現在アクティブなタブを取得
      const activeTab = document.querySelector('#readingStatusTabs .nav-link.active');
      if (activeTab) {
        currentActiveStatus = activeTab.getAttribute('data-status');
      }
      
      // クリアボタンの表示/非表示
      clearButton.style.display = query.length > 0 ? 'block' : 'none';
      
      // 各書籍カードをチェック
      bookCards.forEach(card => {
        const title = card.querySelector('h3 a')?.textContent?.toLowerCase() || '';
        
        // 著者名を取得(Author:を含むpタグを探す)
        let author = '';
        const authorElements = card.querySelectorAll('p');
        authorElements.forEach(p => {
          if (p.textContent.includes('Author:')) {
            author = p.textContent.toLowerCase();
          }
        });
        
        const cardStatus = card.getAttribute('data-status');
        
        // ステータスフィルターをチェック
        const statusMatch = currentActiveStatus === 'all' || cardStatus === currentActiveStatus;
        
        // 検索クエリーをチェック
        const searchMatch = query.length === 0 || 
                           title.includes(query) || 
                           author.includes(query);
        
        // 両方の条件を満たすかチェック
        if (statusMatch && searchMatch) {
          card.style.display = 'block';
          visibleCount++;
        } else {
          card.style.display = 'none';
        }
      });
      
      // 検索結果情報の表示
      if (query.length > 0) {
        searchResultsCount.textContent = visibleCount;
        searchResultsInfo.style.display = 'block';
      } else {
        searchResultsInfo.style.display = 'none';
      }
    }
    
    // リアルタイム検索
    searchInput.addEventListener('input', performSearch);
    
    // クリアボタン
    clearButton.addEventListener('click', function() {
      searchInput.value = '';
      performSearch();
    });
    
    // タブ切り替え時も検索を再実行
    tabButtons.forEach(button => {
      button.addEventListener('click', function() {
        setTimeout(performSearch, 100);
      });
    });
  }
});

// Tab filtering functionality
document.addEventListener('DOMContentLoaded', function() {
  const tabButtons = document.querySelectorAll('#readingStatusTabs [data-status]');
  const bookCards = document.querySelectorAll('.book-card[data-status]');
  
  tabButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      
      // Remove active class from all buttons
      tabButtons.forEach(btn => btn.classList.remove('active'));
      
      // Add active class to clicked button
      this.classList.add('active');
      
      // Get selected status
      const selectedStatus = this.getAttribute('data-status');
      
      // Filter book cards
      bookCards.forEach(card => {
        const cardStatus = card.getAttribute('data-status');
        
        if (selectedStatus === 'all' || cardStatus === selectedStatus) {
          card.style.display = 'block';
        } else {
          card.style.display = 'none';
        }
      });
    });
  });
});

// ISBN検索のテスト用JavaScript
function testISBNSearch() {
  const isbn = prompt("Enter ISBN to search:");
  if (!isbn) return;
  
  fetch(`/books/search_by_isbn?isbn=${isbn}`)
    .then(response => response.json())
    .then(data => {
      console.log('Search results:', data);
      alert('Check browser console for results');
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Search failed');
    });
}
</script>

<button onclick="testISBNSearch()">Test ISBN Search (Console)</button>
</div>

<style>
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
  padding-bottom: 20px;
  border-bottom: 1px solid #eee;
}

.user-info {
  text-align: right;
}

.user-info p {
  margin: 0 0 10px 0;
  font-weight: bold;
}

.actions {
  margin-bottom: 20px;
  padding: 20px;
  background: #f8f9fa;
  border-radius: 5px;
}

/* My Books検索フォームのスタイル */
.my-books-search {
  margin-bottom: 30px;
  padding: 20px;
  background: #ffffff;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.search-box {
  position: relative;
  display: flex;
  align-items: center;
  margin-bottom: 10px;
}

.search-input {
  width: 100%;
  padding: 12px 40px 12px 16px;
  border: 2px solid #ddd;
  border-radius: 25px;
  font-size: 16px;
  transition: all 0.3s ease;
  background: #fafafa;
}

.search-input:focus {
  outline: none;
  border-color: #007bff;
  background: #fff;
  box-shadow: 0 0 0 3px rgba(0,123,255,0.1);
}

.search-input::placeholder {
  color: #999;
  font-style: italic;
}

.clear-button {
  position: absolute;
  right: 12px;
  background: #6c757d;
  color: white;
  border: none;
  border-radius: 50%;
  width: 24px;
  height: 24px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 14px;
  font-weight: bold;
  transition: background-color 0.3s;
}

.clear-button:hover {
  background: #5a6268;
}

.search-results-info {
  padding: 8px 16px;
  background: #e3f2fd;
  color: #1565c0;
  border-radius: 20px;
  font-size: 14px;
  font-weight: 500;
  display: inline-block;
  border-left: 4px solid #2196f3;
}

.isbn-form {
  margin-bottom: 15px;
}

.isbn-form input[type="text"] {
  padding: 8px;
  margin: 0 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.btn {
  padding: 8px 16px;
  text-decoration: none;
  border-radius: 4px;
  display: inline-block;
  margin-right: 10px;
  border: none;
  cursor: pointer;
}

.btn-primary {
  background-color: #007bff;
  color: white;
}

.btn-secondary {
  background-color: #6c757d;
  color: white;
}

.btn-outline-secondary {
  border: 1px solid #6c757d;
  color: #6c757d;
  background: white;
}

#books-list > div {
  border: 1px solid #ddd;
  margin: 15px 0;
  padding: 20px;
  border-radius: 5px;
  background: white;
}

/* Bootstrap Tabs Styling */
.nav-tabs {
  margin-bottom: 20px;
  display: flex;
  border-bottom: 1px solid #dee2e6;
}

.nav-tabs .nav-item {
  flex: 1;
}

.nav-tabs .nav-link {
  display: block;
  text-align: center;
  width: 100%;
  border: 1px solid transparent;
  border-top-left-radius: 0.375rem;
  border-top-right-radius: 0.375rem;
  padding: 12px 8px;
  color: #495057;
  text-decoration: none;
  background-color: transparent;
  border: none;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  transition: all 0.3s ease;
}

.nav-tabs .nav-link:hover {
  border-color: #e9ecef #e9ecef #dee2e6;
  background-color: #f8f9fa;
}

.nav-tabs .nav-link.active {
  color: #495057;
  background-color: #fff;
  border-color: #dee2e6 #dee2e6 #fff;
  border-bottom-color: transparent;
}

.tab-content {
  padding: 20px 0;
}

/* Book Card Styling */
.book-card {
  border: 1px solid #ddd;
  margin: 15px 0;
  padding: 20px;
  border-radius: 8px;
  background: white;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.book-image {
  width: 80px;
  height: 120px;
  float: left;
  margin-right: 15px;
  border-radius: 4px;
}

.book-content {
  overflow: hidden;
}

.reading-status-section {
  margin: 15px 0;
  padding: 15px;
  background: #f8f9fa;
  border-radius: 6px;
  border-left: 4px solid #007bff;
}

.current-status {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 10px;
}

.status-badge {
  padding: 4px 12px;
  border-radius: 15px;
  font-size: 12px;
  font-weight: bold;
  text-transform: uppercase;
}

.status-wish {
  background: #e3f2fd;
  color: #1976d2;
}

.status-tsundoku {
  background: #fff3e0;
  color: #f57c00;
}

.status-completed {
  background: #e8f5e8;
  color: #388e3c;
}

.status-date {
  color: #666;
  font-style: italic;
}

.status-controls {
  display: flex;
  gap: 8px;
  flex-wrap: wrap;
}

.btn-sm {
  padding: 4px 8px;
  font-size: 12px;
}

.book-actions {
  margin-top: 15px;
  display: flex;
  gap: 10px;
}

.no-books {
  text-align: center;
  padding: 40px;
  color: #666;
}

.clearfix {
  clear: both;
}

/* Responsive Styles for Tabs */
@media (max-width: 768px) {
  .nav-tabs .nav-link {
    font-size: 12px;
    padding: 10px 4px;
  }
}

@media (max-width: 480px) {
  .nav-tabs .nav-link {
    font-size: 11px;
    padding: 8px 2px;
  }
}
</style>